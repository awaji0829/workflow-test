---
description: figma mcp 서버를 통해  화면 개발 요청 시  해당 문서 참조,  화면 개발 및 수정 요청 받을 시 해당 문서 참조
globs: 
alwaysApply: false
---
# Global UI Guideline

> 이 문서는 프로젝트에서 사용하는 전역 UI 유틸리티(Toast, Modal, Error Handling 등)의 사용 방법과 규칙을 정의합니다.  
> 모든 전역 컴포넌트는 [`shadcn/ui`](mdc:https:/ui.shadcn.com) 기반으로 구현되며, `main.tsx`에서 provider로 전역 설정되어 있으니, 아래 명시된 방법으로 사용합니다.

---


## 1. Toast 사용 가이드

### 목적

사용자에게 간단한 피드백(알림, 완료, 오류 등)을 전달하기 위한 전역 알림 컴포넌트입니다.

### 사용 방법

```ts
import { useToast } from "@/hooks/use-toast";

toast({
  title: "저장 완료",
  description: "변경 사항이 저장되었습니다.",
  variant: "success", // default | success | error | destructive
});
```

### 규칙

- Toast는 간단한 상태 알림(성공, 실패 등)에만 사용합니다.
- 사용자 상호작용이 필요한 경우 Modal을 사용합니다.
- 모든 Toast 호출은 toast() 유틸을 통해 직접 호출하며, Toaster는 이미 main.tsx에서 전역 설정되어 있습니다.

---

## 2. Modal 사용 가이드

### 목적

사용자에게 확인(Confirm), 경고(Alert), 커스텀 UI를 보여주기 위한 전역 모달 컴포넌트입니다.

### 사용 방식

```ts
import { useModal } from "@/hooks/\buse-modal";

const { open, confirmAsync } = useModal();

const result = await confirmAsync({
  title: "삭제하시겠습니까?",
  description: "이 작업은 되돌릴 수 없습니다.",
});

if (result) {
  // 삭제 로직 수행
}
```

또는 간단하게 open 호출도 가능:

```ts
open({
  type: "custom",
  title: "안내",
  description: "현재 기능은 준비 중입니다.",
});
```

### 규칙

- 사용자는 항상 useModal() 훅을 통해 모달을 호출합니다.
- 전역 모달은 ModalProvider로 관리되며, confirm, alert, error 모달을 기본 제공합니다.
- 커스텀 모달을 만들 경우에도 가능한 전역 구조에 통합하여 관리합니다.
- main.tsx에서 ModalProvider로 앱이 감싸져 있기 때문에 어디서든 사용 가능합니다.

---

## 3. Error Handling 전략

### 구성 요소

| 컴포넌트             | 역할                                                   |
| -------------------- | ------------------------------------------------------ |
| `ErrorBoundary`      | 렌더링 중 발생한 컴포넌트 오류 처리                    |
| `GlobalErrorHandler` | 전역 비동기 오류(promise reject, window error 등) 처리 |
| `ErrorFallbackUI`    | 사용자에게 표시되는 오류 메시지 컴포넌트               |

### 사용 예시

**렌더링 오류:**

```tsx
<ErrorBoundary fallback={<ErrorFallbackUI error={error} />}>
  <UserProfile />
</ErrorBoundary>
```

**비동기 오류:**

```ts
useEffect(() => {
  void (async () => {
    throw new Error("비동기 오류 발생");
  })();
}, []);
```

GlobalErrorHandler가 자동으로 감지하여 전역 modal로 보여줍니다.

### 규칙

- 모든 오류는 반드시 Error 객체로 throw해야 합니다.
- 사용자에게 표시되는 메시지는 명확하고 친절해야 하며, 개발자 디버깅 메시지는 분리합니다.
- 예상 가능한 오류는 ErrorBoundary로 처리하고, 예외적인 비동기 오류는 GlobalErrorHandler에 위임합니다.

---

## 4. Provider 전역 설정 (main.tsx)

```tsx
ReactDOM.createRoot(document.getElementById("root")!).render(
  <React.StrictMode>
    <QueryProvider>
      <Router>
        <ThemeProvider>
          <ModalProvider>
            <Toaster />
            <GlobalErrorHandler>
              <App />
            </GlobalErrorHandler>
          </ModalProvider>
        </ThemeProvider>
      </Router>
    </QueryProvider>
  </React.StrictMode>
);
```

모든 전역 유틸리티는 위 구조에 따라 자동으로 활성화되어 있으므로 각 컴포넌트에서 Provider를 따로 설정할 필요가 없습니다.

---

## 5. Form 사용 가이드라인 (shadcn + react-hook-form 기반)

이 프로젝트는 `shadcn/ui`에서 제공하는 `form.tsx` 유틸 컴포넌트를 사용합니다.  
하지만 불필요하게 구조가 복잡해지지 않도록 아래 기준에 따라 사용합니다.

### 기본 원칙

- 기본 `Input`, `Textarea` 등은 **무조건 `register()` 사용**
- `Controller` + `FormField`는 **제어 컴포넌트(Select, Checkbox 등)** 에만 사용
- `FormItem`, `FormLabel`, `FormMessage` 등은 필요한 경우에만 사용

---

### 1. register()만으로 처리하는 기본 Input 예시

```tsx
<form onSubmit={handleSubmit(onSubmit)}>
  <label htmlFor="email">이메일</label>
  <Input id="email" {...register("email")} />
  {errors.email && <p>{errors.email.message}</p>}
</form>
```

---

### 2. Controller 사용이 필요한 컴포넌트

| 컴포넌트   | 사유                           |
| ---------- | ------------------------------ |
| Select     | onValueChange 기반             |
| Checkbox   | checked / onCheckedChange 필요 |
| Switch     | boolean 상태 관리 필요         |
| DatePicker | 복합 객체 제어 필요            |

```tsx
<FormField
  control={control}
  name="role"
  render={({ field }) => (
    <FormItem>
      <FormLabel>권한</FormLabel>
      <FormControl>
        <Select value={field.value} onValueChange={field.onChange}>
          ...
        </Select>
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>
```

---

### 3. 비추천 예시 (단순한 입력에 Controller 사용)

```tsx
// ❌ 불필요하게 복잡한 방식
<FormField
  control={control}
  name="username"
  render={({ field }) => (
    <FormItem>
      <FormLabel>이름</FormLabel>
      <FormControl>
        <Input {...field} />
      </FormControl>
      <FormMessage />
    </FormItem>
  )}
/>
```

✅ 이건 그냥 이렇게 하면 충분합니다:

```tsx
<Input {...register("username")} />
```

---

### 4. form.tsx 내 컴포넌트 구성

| 컴포넌트          | 설명                                  |
| ----------------- | ------------------------------------- |
| `Form`            | `FormProvider`를 래핑한 컴포넌트      |
| `FormField`       | `Controller`를 내부에서 감싼 컴포넌트 |
| `FormItem`        | 필드 하나의 묶음(wrapper)             |
| `FormLabel`       | 라벨 컴포넌트                         |
| `FormControl`     | 실제 입력 요소에 연결되는 컴포넌트    |
| `FormMessage`     | 오류 메시지를 출력                    |
| `FormDescription` | 설명을 출력                           |

⚠️ 전부 필수는 아니며, 필요한 경우에만 사용합니다.

---

## 6. Figma / Cursor / MCP 연동 기준

### 전환 흐름

- 디자이너가 Figma에서 화면 디자인 생성
- Cursor MCP를 통해 해당 화면 링크를 받아 자동으로 컴포넌트 생성
- 생성된 컴포넌트는 shadcn 구조로 맞춰 작성되어야 하며, 필요한 경우 전역 UI 유틸 사용 가능

### 유의 사항

- MCP로 생성된 컴포넌트 내부에서 Toast, Modal 호출 시 반드시 useToast(), useModal() 사용
- 생성된 UI에 오류 발생 시 전역 modal 또는 ErrorBoundary로 처리
- 전역 모달 컴포넌트는 type: confirm | alert | error | custom 기준으로 분기

---

## 7. 전역 UI 컴포넌트 커스터마이징 규칙

`@/components/ui/` 디렉토리에 있는 shadcn 기반 UI 컴포넌트(Button, Dialog, Toast 등)는  
기본 스타일(className, animation, transition 등)이 내부적으로 고정되어 있습니다.

### 커스터마이징 시 반드시 다음 규칙을 따릅니다:

- ✅ **Wrapper 컴포넌트를 만들어 확장합니다.**
- ❌ **기존 컴포넌트 내부의 className/cva 구조를 직접 수정하지 않습니다.**
- ❗ 예외적으로 직접 수정이 허용되는 경우:
  - 위치, 트랜지션, 애니메이션 등 기본 동작이 **UX에 명백한 영향을 주는 경우**
  - **디자이너 또는 사용자 요청**이 있으며 **팀 내 사전 협의가 완료된 경우**

> 📌 **Figma → Cursor → MCP 흐름에서 자동 생성된 컴포넌트도 본 가이드를 반드시 따라야 합니다.**

---

## ✅ 마무리

이 가이드는 전역 UI 유틸리티의 일관된 사용을 위해 작성되었습니다.  
Cursor, Figma, MCP를 기반으로 하는 UI 자동 생성 흐름에서도 본 가이드라인을 반드시 참고하여  
기능별/역할별 전역 컴포넌트를 올바르게 활용해 주세요.


